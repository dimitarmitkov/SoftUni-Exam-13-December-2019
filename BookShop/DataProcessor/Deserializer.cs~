namespace BookShop.DataProcessor
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Text;
    using System.Xml.Serialization;
    using BookShop.Data.Models;
    using BookShop.DataProcessor.ImportDto;
    using CarDealer.XMLHelper;
    using Data;
    using Newtonsoft.Json;
    using ValidationContext = System.ComponentModel.DataAnnotations.ValidationContext;

    public class Deserializer
    {
        private const string ErrorMessage = "Invalid data!";

        private const string SuccessfullyImportedBook
            = "Successfully imported book {0} for {1:F2}.";

        private const string SuccessfullyImportedAuthor
            = "Successfully imported author - {0} with {1} books.";

        public static string ImportBooks(BookShopContext context, string xmlString)
        {
            var sb = new StringBuilder();

            const string rootElement = "Books";

            var booksResult = XMLConverter.Deserializer<ImportBooksDto>(xmlString, rootElement);

            var books = booksResult
                .Select(b => new Book
                {
                    Name = b.Name,
                    Genre = b.Genre,
                    Price = b.Price,
                    Pages = b.Pages,
                    PublishedOn = b.PublishedOn
                })
                .ToArray();

            foreach (var book in books)
            {
                context.Books.Add(book);

                var addedBooks = context.SaveChanges();

                if (addedBooks == 0)
                {
                    sb.AppendLine(ErrorMessage);
                }
                sb.AppendLine($"Successfully imported book {book.Name} for {book.Price:F2}.");

            }

            return sb.ToString().Trim();
        }

        public static string ImportAuthors(BookShopContext context, string jsonString)
        {
            throw new NotImplementedException();
        }

        private static bool IsValid(object dto)
        {
            var validationContext = new ValidationContext(dto);
            var validationResult = new List<ValidationResult>();

            return Validator.TryValidateObject(dto, validationContext, validationResult, true);
        }
    }
}